use std::collections::HashMap;
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum InstructionCode {
    LDA,
    LDX,
    LDY,
    STA,
    STX,
    STY,
    ADC,
    SBC,
    INC,
    INX,
    INY,
    DEC,
    DEX,
    DEY,
    AND,
    ORA,
    EOR,
    JMP,
    BCC,
    BCS,
    BEQ,
    BNE,
    BMI,
    BPL,
    BVS,
    BVC,
    CMP,
    CPX,
    CPY,
    BIT,
    ASL,
    LSR,
    ROL,
    ROR,
    TSX,
    TXS,
    PHA,
    PHP,
    PLA,
    PLP,
    JSR,
    RTS,
    RTI,
    CLC,
    CLD,
    CLI,
    CLV,
    SEC,
    SED,
    SEI,
    NOP,
    BRK,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum AddressModeIndexer {
    ABSOLUTE,
    ABS_X,
    ABS_Y,
    IMMEDIATE,
    ZERO_PAGE,
    INDEX_IND,
    ZP_X,
    IND_INDEX,
    ZP_Y,
    IMPLIED,
    RELATIVE,
    ACCUMULATOR,
    ABSOLUTE_INDIRECT,
}

pub static INSTRUCTION_SET: &[(InstructionCode, AddressModeIndexer, u8)] = &[
    (InstructionCode::LDA, AddressModeIndexer::ABSOLUTE, 0xAD),
    (InstructionCode::LDA, AddressModeIndexer::ABS_X, 0xBD),
    (InstructionCode::LDA, AddressModeIndexer::ABS_Y, 0xB9),
    (InstructionCode::LDA, AddressModeIndexer::IMMEDIATE, 0xA9),
    (InstructionCode::LDA, AddressModeIndexer::ZERO_PAGE, 0xA5),
    (InstructionCode::LDA, AddressModeIndexer::INDEX_IND, 0xA1),
    (InstructionCode::LDA, AddressModeIndexer::ZP_X, 0xB5),
    (InstructionCode::LDA, AddressModeIndexer::IND_INDEX, 0xB1),
    (InstructionCode::LDX, AddressModeIndexer::ABSOLUTE, 0xAE),
    (InstructionCode::LDX, AddressModeIndexer::ABS_Y, 0xBE),
    (InstructionCode::LDX, AddressModeIndexer::IMMEDIATE, 0xA2),
    (InstructionCode::LDX, AddressModeIndexer::ZERO_PAGE, 0xA6),
    (InstructionCode::LDX, AddressModeIndexer::ZP_Y, 0xB6),
    (InstructionCode::LDY, AddressModeIndexer::ABSOLUTE, 0xAC),
    (InstructionCode::LDY, AddressModeIndexer::ABS_X, 0xBC),
    (InstructionCode::LDY, AddressModeIndexer::IMMEDIATE, 0xA0),
    (InstructionCode::LDY, AddressModeIndexer::ZERO_PAGE, 0xA4),
    (InstructionCode::LDY, AddressModeIndexer::ZP_X, 0xB4),
    (InstructionCode::STA, AddressModeIndexer::ABSOLUTE, 0x8D),
    (InstructionCode::STA, AddressModeIndexer::ABS_X, 0x9D),
    (InstructionCode::STA, AddressModeIndexer::ABS_Y, 0x99),
    (InstructionCode::STA, AddressModeIndexer::ZERO_PAGE, 0x85),
    (InstructionCode::STA, AddressModeIndexer::INDEX_IND, 0x81),
    (InstructionCode::STA, AddressModeIndexer::ZP_X, 0x95),
    (InstructionCode::STA, AddressModeIndexer::IND_INDEX, 0x91),
    (InstructionCode::STX, AddressModeIndexer::ABSOLUTE, 0x8E),
    (InstructionCode::STX, AddressModeIndexer::ZERO_PAGE, 0x86),
    (InstructionCode::STX, AddressModeIndexer::ZP_Y, 0x96),
    (InstructionCode::STY, AddressModeIndexer::ABSOLUTE, 0x8C),
    (InstructionCode::STY, AddressModeIndexer::ZERO_PAGE, 0x84),
    (InstructionCode::STY, AddressModeIndexer::ZP_X, 0x94),
    (InstructionCode::ADC, AddressModeIndexer::ABSOLUTE, 0x6D),
    (InstructionCode::ADC, AddressModeIndexer::ABS_X, 0x7D),
    (InstructionCode::ADC, AddressModeIndexer::ABS_Y, 0x79),
    (InstructionCode::ADC, AddressModeIndexer::IMMEDIATE, 0x69),
    (InstructionCode::ADC, AddressModeIndexer::ZERO_PAGE, 0x65),
    (InstructionCode::ADC, AddressModeIndexer::INDEX_IND, 0x61),
    (InstructionCode::ADC, AddressModeIndexer::ZP_X, 0x75),
    (InstructionCode::ADC, AddressModeIndexer::IND_INDEX, 0x71),
    (InstructionCode::SBC, AddressModeIndexer::ABSOLUTE, 0xED),
    (InstructionCode::SBC, AddressModeIndexer::ABS_X, 0xFD),
    (InstructionCode::SBC, AddressModeIndexer::ABS_Y, 0xF9),
    (InstructionCode::SBC, AddressModeIndexer::IMMEDIATE, 0xE9),
    (InstructionCode::SBC, AddressModeIndexer::ZERO_PAGE, 0xE5),
    (InstructionCode::SBC, AddressModeIndexer::INDEX_IND, 0xE1),
    (InstructionCode::SBC, AddressModeIndexer::ZP_X, 0xF5),
    (InstructionCode::SBC, AddressModeIndexer::IND_INDEX, 0xF1),
    (InstructionCode::INC, AddressModeIndexer::ABSOLUTE, 0xEE),
    (InstructionCode::INC, AddressModeIndexer::ABS_X, 0xFE),
    (InstructionCode::INC, AddressModeIndexer::ZERO_PAGE, 0xE6),
    (InstructionCode::INC, AddressModeIndexer::ZP_X, 0xF6),
    (InstructionCode::INX, AddressModeIndexer::IMPLIED, 0xE8),
    (InstructionCode::INY, AddressModeIndexer::IMPLIED, 0xC8),
    (InstructionCode::DEC, AddressModeIndexer::ABSOLUTE, 0xCE),
    (InstructionCode::DEC, AddressModeIndexer::ABS_X, 0xDE),
    (InstructionCode::DEC, AddressModeIndexer::ZERO_PAGE, 0xC6),
    (InstructionCode::DEC, AddressModeIndexer::ZP_X, 0xD6),
    (InstructionCode::DEX, AddressModeIndexer::IMPLIED, 0xCA),
    (InstructionCode::DEY, AddressModeIndexer::IMPLIED, 0x88),
    (InstructionCode::AND, AddressModeIndexer::ABSOLUTE, 0x2D),
    (InstructionCode::AND, AddressModeIndexer::ABS_X, 0x3D),
    (InstructionCode::AND, AddressModeIndexer::ABS_Y, 0x39),
    (InstructionCode::AND, AddressModeIndexer::IMMEDIATE, 0x29),
    (InstructionCode::AND, AddressModeIndexer::ZERO_PAGE, 0x25),
    (InstructionCode::AND, AddressModeIndexer::INDEX_IND, 0x21),
    (InstructionCode::AND, AddressModeIndexer::ZP_X, 0x35),
    (InstructionCode::AND, AddressModeIndexer::IND_INDEX, 0x31),
    (InstructionCode::ORA, AddressModeIndexer::ABSOLUTE, 0x0D),
    (InstructionCode::ORA, AddressModeIndexer::ABS_X, 0x1D),
    (InstructionCode::ORA, AddressModeIndexer::ABS_Y, 0x19),
    (InstructionCode::ORA, AddressModeIndexer::IMMEDIATE, 0x09),
    (InstructionCode::ORA, AddressModeIndexer::ZERO_PAGE, 0x05),
    (InstructionCode::ORA, AddressModeIndexer::INDEX_IND, 0x01),
    (InstructionCode::ORA, AddressModeIndexer::ZP_X, 0x15),
    (InstructionCode::ORA, AddressModeIndexer::IND_INDEX, 0x11),
    (InstructionCode::EOR, AddressModeIndexer::ABSOLUTE, 0x4D),
    (InstructionCode::EOR, AddressModeIndexer::ABS_X, 0x5D),
    (InstructionCode::EOR, AddressModeIndexer::ABS_Y, 0x59),
    (InstructionCode::EOR, AddressModeIndexer::IMMEDIATE, 0x49),
    (InstructionCode::EOR, AddressModeIndexer::ZERO_PAGE, 0x45),
    (InstructionCode::EOR, AddressModeIndexer::INDEX_IND, 0x41),
    (InstructionCode::EOR, AddressModeIndexer::ZP_X, 0x55),
    (InstructionCode::EOR, AddressModeIndexer::IND_INDEX, 0x51),
    (InstructionCode::JMP, AddressModeIndexer::ABSOLUTE, 0x4C),
    (
        InstructionCode::JMP,
        AddressModeIndexer::ABSOLUTE_INDIRECT,
        0x6C,
    ),
    (InstructionCode::BCC, AddressModeIndexer::RELATIVE, 0x90),
    (InstructionCode::BCS, AddressModeIndexer::RELATIVE, 0xB0),
    (InstructionCode::BEQ, AddressModeIndexer::RELATIVE, 0xF0),
    (InstructionCode::BNE, AddressModeIndexer::RELATIVE, 0xD0),
    (InstructionCode::BMI, AddressModeIndexer::RELATIVE, 0x30),
    (InstructionCode::BPL, AddressModeIndexer::RELATIVE, 0x10),
    (InstructionCode::BVS, AddressModeIndexer::RELATIVE, 0x70),
    (InstructionCode::BVC, AddressModeIndexer::RELATIVE, 0x50),
    (InstructionCode::CMP, AddressModeIndexer::ABSOLUTE, 0xCD),
    (InstructionCode::CMP, AddressModeIndexer::ABS_X, 0xDD),
    (InstructionCode::CMP, AddressModeIndexer::ABS_Y, 0xD9),
    (InstructionCode::CMP, AddressModeIndexer::IMMEDIATE, 0xC9),
    (InstructionCode::CMP, AddressModeIndexer::ZERO_PAGE, 0xC5),
    (InstructionCode::CMP, AddressModeIndexer::INDEX_IND, 0xC1),
    (InstructionCode::CMP, AddressModeIndexer::ZP_X, 0xD5),
    (InstructionCode::CMP, AddressModeIndexer::IND_INDEX, 0xD1),
    (InstructionCode::CPX, AddressModeIndexer::ABSOLUTE, 0xEC),
    (InstructionCode::CPX, AddressModeIndexer::IMMEDIATE, 0xE0),
    (InstructionCode::CPX, AddressModeIndexer::ZERO_PAGE, 0xE4),
    (InstructionCode::CPY, AddressModeIndexer::ABSOLUTE, 0xCC),
    (InstructionCode::CPY, AddressModeIndexer::IMMEDIATE, 0xC0),
    (InstructionCode::CPY, AddressModeIndexer::ZERO_PAGE, 0xC4),
    (InstructionCode::BIT, AddressModeIndexer::ABSOLUTE, 0x2C),
    (InstructionCode::BIT, AddressModeIndexer::IMMEDIATE, 0x89),
    (InstructionCode::BIT, AddressModeIndexer::ZERO_PAGE, 0x24),
    (InstructionCode::ASL, AddressModeIndexer::ABSOLUTE, 0x0E),
    (InstructionCode::ASL, AddressModeIndexer::ABS_X, 0x1E),
    (InstructionCode::ASL, AddressModeIndexer::ACCUMULATOR, 0x0A),
    (InstructionCode::ASL, AddressModeIndexer::ZERO_PAGE, 0x06),
    (InstructionCode::ASL, AddressModeIndexer::ZP_X, 0x16),
    (InstructionCode::LSR, AddressModeIndexer::ABSOLUTE, 0x4E),
    (InstructionCode::LSR, AddressModeIndexer::ABS_X, 0x5E),
    (InstructionCode::LSR, AddressModeIndexer::ACCUMULATOR, 0x4A),
    (InstructionCode::LSR, AddressModeIndexer::ZERO_PAGE, 0x46),
    (InstructionCode::LSR, AddressModeIndexer::ZP_X, 0x56),
    (InstructionCode::ROL, AddressModeIndexer::ABSOLUTE, 0x2E),
    (InstructionCode::ROL, AddressModeIndexer::ABS_X, 0x3E),
    (InstructionCode::ROL, AddressModeIndexer::ACCUMULATOR, 0x2A),
    (InstructionCode::ROL, AddressModeIndexer::ZERO_PAGE, 0x26),
    (InstructionCode::ROL, AddressModeIndexer::ZP_X, 0x36),
    (InstructionCode::ROR, AddressModeIndexer::ABSOLUTE, 0x6E),
    (InstructionCode::ROR, AddressModeIndexer::ABS_X, 0x7E),
    (InstructionCode::ROR, AddressModeIndexer::ACCUMULATOR, 0x6A),
    (InstructionCode::ROR, AddressModeIndexer::ZERO_PAGE, 0x66),
    (InstructionCode::ROR, AddressModeIndexer::ZP_X, 0x76),
    (InstructionCode::TSX, AddressModeIndexer::IMPLIED, 0xBA),
    (InstructionCode::TXS, AddressModeIndexer::IMPLIED, 0x9A),
    (InstructionCode::PHA, AddressModeIndexer::IMPLIED, 0x48),
    (InstructionCode::PHP, AddressModeIndexer::IMPLIED, 0x08),
    (InstructionCode::PLA, AddressModeIndexer::IMPLIED, 0x68),
    (InstructionCode::PLP, AddressModeIndexer::IMPLIED, 0x28),
    (InstructionCode::JSR, AddressModeIndexer::ABSOLUTE, 0x20),
    (InstructionCode::RTS, AddressModeIndexer::IMPLIED, 0x60),
    (InstructionCode::RTI, AddressModeIndexer::IMPLIED, 0x40),
    (InstructionCode::CLC, AddressModeIndexer::IMPLIED, 0x18),
    (InstructionCode::CLD, AddressModeIndexer::IMPLIED, 0xD8),
    (InstructionCode::CLI, AddressModeIndexer::IMPLIED, 0x58),
    (InstructionCode::CLV, AddressModeIndexer::IMPLIED, 0xB8),
    (InstructionCode::SEC, AddressModeIndexer::IMPLIED, 0x38),
    (InstructionCode::SED, AddressModeIndexer::IMPLIED, 0xF8),
    (InstructionCode::SEI, AddressModeIndexer::IMPLIED, 0x78),
    (InstructionCode::NOP, AddressModeIndexer::IMPLIED, 0xEA),
    (InstructionCode::BRK, AddressModeIndexer::IMPLIED, 0x00),
];

lazy_static! {
    pub static ref INSTRUCTION_MAP: HashMap<(InstructionCode, AddressModeIndexer), u8> = {
        let mut map = HashMap::new();
        for (code, mode, opcode) in INSTRUCTION_SET.iter() {
            map.insert((*code, *mode), *opcode);
        }
        map
    };
}

pub static INSTRUCTION_STRINGS: &[(InstructionCode, &str)] = &[
    (InstructionCode::LDA, "LDA"),
    (InstructionCode::LDX, "LDX"),
    (InstructionCode::LDY, "LDY"),
    (InstructionCode::STA, "STA"),
    (InstructionCode::STX, "STX"),
    (InstructionCode::STY, "STY"),
    (InstructionCode::ADC, "ADC"),
    (InstructionCode::SBC, "SBC"),
    (InstructionCode::INC, "INC"),
    (InstructionCode::INX, "INX"),
    (InstructionCode::INY, "INY"),
    (InstructionCode::DEC, "DEC"),
    (InstructionCode::DEX, "DEX"),
    (InstructionCode::DEY, "DEY"),
    (InstructionCode::AND, "AND"),
    (InstructionCode::ORA, "ORA"),
    (InstructionCode::EOR, "EOR"),
    (InstructionCode::JMP, "JMP"),
    (InstructionCode::BCC, "BCC"),
    (InstructionCode::BCS, "BCS"),
    (InstructionCode::BEQ, "BEQ"),
    (InstructionCode::BNE, "BNE"),
    (InstructionCode::BMI, "BMI"),
    (InstructionCode::BPL, "BPL"),
    (InstructionCode::BVS, "BVS"),
    (InstructionCode::BVC, "BVC"),
    (InstructionCode::CMP, "CMP"),
    (InstructionCode::CPX, "CPX"),
    (InstructionCode::CPY, "CPY"),
    (InstructionCode::BIT, "BIT"),
    (InstructionCode::ASL, "ASL"),
    (InstructionCode::LSR, "LSR"),
    (InstructionCode::ROL, "ROL"),
    (InstructionCode::ROR, "ROR"),
    (InstructionCode::TSX, "TSX"),
    (InstructionCode::TXS, "TXS"),
    (InstructionCode::PHA, "PHA"),
    (InstructionCode::PHP, "PHP"),
    (InstructionCode::PLA, "PLA"),
    (InstructionCode::PLP, "PLP"),
    (InstructionCode::JSR, "JSR"),
    (InstructionCode::RTS, "RTS"),
    (InstructionCode::RTI, "RTI"),
    (InstructionCode::CLC, "CLC"),
    (InstructionCode::CLD, "CLD"),
    (InstructionCode::CLI, "CLI"),
    (InstructionCode::CLV, "CLV"),
    (InstructionCode::SEC, "SEC"),
    (InstructionCode::SED, "SED"),
    (InstructionCode::SEI, "SEI"),
    (InstructionCode::NOP, "NOP"),
    (InstructionCode::BRK, "BRK"),
];

lazy_static! {
    pub static ref INSTRUCTION_STR_MAP: HashMap<&'static str, InstructionCode> = {
        let mut map = HashMap::new();
        for (code, string) in INSTRUCTION_STRINGS.iter() {
            map.insert(*string, *code);
        }
        map
    };
}
